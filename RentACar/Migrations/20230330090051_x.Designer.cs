// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentACar.Data;

#nullable disable

namespace Investments.Migrations
{
    [DbContext(typeof(APIDatabaseContext))]
    [Migration("20230330090051_x")]
    partial class x
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RentACar.Models.Db.CarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AirConditioningType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("FuelUsage")
                        .HasColumnType("double precision");

                    b.Property<string>("GearboxType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("NumberOfSeats")
                        .HasColumnType("smallint");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("double precision");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CarEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirConditioningType = "Automatic",
                            Availability = true,
                            Brand = "Mercedes-Benz",
                            Colour = "Black",
                            FuelType = "Petrol",
                            FuelUsage = 11.199999999999999,
                            GearboxType = "Manual",
                            Model = "G",
                            NumberOfSeats = (byte)5,
                            PricePerDay = 150.0,
                            ProductionYear = 2010,
                            RegistrationDate = new DateTime(2023, 3, 30, 9, 0, 51, 59, DateTimeKind.Utc).AddTicks(673)
                        },
                        new
                        {
                            Id = 2,
                            AirConditioningType = "Manual",
                            Availability = true,
                            Brand = "Toyota",
                            Colour = "White",
                            FuelType = "Petrol",
                            FuelUsage = 6.5,
                            GearboxType = "Manual",
                            Model = "Corolla",
                            NumberOfSeats = (byte)5,
                            PricePerDay = 40.0,
                            ProductionYear = 2007,
                            RegistrationDate = new DateTime(2023, 3, 30, 9, 0, 51, 59, DateTimeKind.Utc).AddTicks(676)
                        },
                        new
                        {
                            Id = 3,
                            AirConditioningType = "Automatic",
                            Availability = true,
                            Brand = "Hyundai",
                            Colour = "Red",
                            FuelType = "Petrol",
                            FuelUsage = 5.0999999999999996,
                            GearboxType = "Automatic",
                            Model = "i30",
                            NumberOfSeats = (byte)5,
                            PricePerDay = 65.0,
                            ProductionYear = 2022,
                            RegistrationDate = new DateTime(2023, 3, 30, 9, 0, 51, 59, DateTimeKind.Utc).AddTicks(678)
                        });
                });

            modelBuilder.Entity("RentACar.Models.Db.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CustomerEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 3500.0,
                            BirthDate = new DateTime(1995, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jan",
                            Nationality = "Poland",
                            RegistrationDate = new DateTime(2023, 3, 30, 9, 0, 51, 59, DateTimeKind.Utc).AddTicks(492),
                            Surname = "Kowalski"
                        },
                        new
                        {
                            Id = 2,
                            Balance = 750.0,
                            BirthDate = new DateTime(2003, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Adam",
                            Nationality = "Poland",
                            RegistrationDate = new DateTime(2023, 3, 30, 9, 0, 51, 59, DateTimeKind.Utc).AddTicks(494),
                            Surname = "Nowak"
                        },
                        new
                        {
                            Id = 3,
                            Balance = 6500.0,
                            BirthDate = new DateTime(1985, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Giorno",
                            Nationality = "Italy",
                            RegistrationDate = new DateTime(2023, 3, 30, 9, 0, 51, 59, DateTimeKind.Utc).AddTicks(496),
                            Surname = "Giovanna"
                        });
                });

            modelBuilder.Entity("RentACar.Models.Db.ReservationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReservationFinishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ReservationStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarEntityId");

                    b.HasIndex("CustomerEntityId");

                    b.ToTable("ReservationEntities");
                });

            modelBuilder.Entity("RentACar.Models.Db.ReservationEntity", b =>
                {
                    b.HasOne("RentACar.Models.Db.CarEntity", "CarEntity")
                        .WithMany("ReservationEntities")
                        .HasForeignKey("CarEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Models.Db.CustomerEntity", "CustomerEntity")
                        .WithMany("ReservationEntities")
                        .HasForeignKey("CustomerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarEntity");

                    b.Navigation("CustomerEntity");
                });

            modelBuilder.Entity("RentACar.Models.Db.CarEntity", b =>
                {
                    b.Navigation("ReservationEntities");
                });

            modelBuilder.Entity("RentACar.Models.Db.CustomerEntity", b =>
                {
                    b.Navigation("ReservationEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
